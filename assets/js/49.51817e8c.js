(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{475:function(e,t,_){"use strict";_.r(t);var v=_(2),a=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("大家好，我是香香。")]),e._v(" "),t("p",[e._v("前面介绍了 Collection 容器中的 "),t("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247484004&idx=1&sn=bafef4c3a4cb812c154b634e9fa3d0a2&chksm=cf051fe5f87296f350cdcceabc398592a951f7dfa9d68d01d8457815c039c269ca1098f9f036&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("List 集合的实现类的特点。"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("今天给大家带来的是 Set 集合的实现类的介绍。")]),e._v(" "),t("p",[e._v("让我们再来复习一下集合的概念：")]),e._v(" "),t("blockquote",[t("p",[e._v("集合是 Java 中非常重要的一个概念，它用于存储一组元素，并提供了方便的操作。")]),e._v(" "),t("p",[e._v("集合中的元素可以是任何 Java 对象，如整型、字符串、自定义类等。")]),e._v(" "),t("p",[e._v("在集合中，每个元素都有一个唯一的标识符，称为元素的键。")])]),e._v(" "),t("h2",{attrs:{id:"关于-set-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于-set-集合"}},[e._v("#")]),e._v(" 关于 Set 集合")]),e._v(" "),t("p",[e._v("Set 集合的构成：")]),e._v(" "),t("p",[e._v("Set 常见的的实现类有：HashSet、TreeSet")]),e._v(" "),t("blockquote",[t("p",[e._v("Set 接口是 Collection 容器的一种实现，它用于存储不重复的元素集合，提供了添加、删除、遍历等基本操作。")]),e._v(" "),t("p",[e._v("与 List 接口不同的是，Set 接口不允许存储重复的元素，因此它可以用来去重。")]),e._v(" "),t("p",[e._v("在 Set 接口中，元素的存储顺序是无序的，因为它是通过哈希表来实现的。")])]),e._v(" "),t("p",[e._v("Set 接口的实现类有很多种，下面介绍一些常用的实现类：HashSet、LinkedHashSet、TreeSet 并扩展了解 EnumSet 的用法。")]),e._v(" "),t("h3",{attrs:{id:"_1-hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashset"}},[e._v("#")]),e._v(" 1. HashSet")]),e._v(" "),t("p",[e._v("HashSet 最常用的 Set 实现类之一，它是通过哈希表来实现的。")]),e._v(" "),t("p",[e._v("哈希表是一种使用哈希算法来存储和查找数据的数据结构，它具有快速的插入、删除和查找操作。")]),e._v(" "),t("p",[e._v("在 HashSet 中，元素的顺序是无序的，因为哈希表中的元素是按照哈希值存储的，而哈希值是根据元素的 hashCode() 方法计算出来的，与元素的插入顺序无关。")]),e._v(" "),t("p",[e._v("HashSet 内部使用 HashMap 来存储元素，其中元素的值为 HashMap 中的键，而元素在 HashSet 中的值都是默认为 Object 类型的。")]),e._v(" "),t("p",[e._v("如果需要存储自定义类型的元素，需要重写自定义类的 hashCode() 和 equals() 方法。")]),e._v(" "),t("p",[e._v("当我们往 HashSet 中添加一个元素时，HashSet 首先会调用该元素的 hashCode() 方法来得到它的哈希值，然后根据哈希值来计算出元素在哈希表中的位置。")]),e._v(" "),t("p",[e._v("如果该位置已经有其他元素了，那么就会以链表的形式将新元素添加到该位置的末尾。如果该位置没有其他元素，那么就直接将新元素插入到该位置。")]),e._v(" "),t("p",[e._v("在使用 HashSet 时，需要注意元素的 hashCode() 方法和 equals() 方法的实现，因为 HashSet 中的元素是根据哈希值来判断是否相等的。")]),e._v(" "),t("p",[e._v("如果两个元素的哈希值相同，但是它们的 equals() 方法返回 false，那么 HashSet 会认为它们是不同的元素。")]),e._v(" "),t("h3",{attrs:{id:"_2-linkedhashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-linkedhashset"}},[e._v("#")]),e._v(" 2. LinkedHashSet")]),e._v(" "),t("p",[e._v("LinkedHashSet 是 HashSet 的一个子类，它继承了 HashSet 的功能，并且增加了维护插入顺序的特性。")]),e._v(" "),t("p",[e._v("LinkedHashSet 中的元素是按照插入顺序存储的，因此可以用来对元素进行排序或者记录元素的插入顺序。")]),e._v(" "),t("p",[e._v("LinkedHashSet 内部维护了一个双向链表，用来维护插入顺序。由于 LinkedHashSet 需要维护一个链表，因此在插入和删除元素时，会比 HashSet 慢一些。")]),e._v(" "),t("p",[e._v("当我们往 LinkedHashSet 中添加一个元素时，LinkedHashSet 会将新元素添加到链表的末尾，并在哈希表中记录该元素的位置。")]),e._v(" "),t("p",[e._v("当我们遍历 LinkedHashSet时，它会根据链表的顺序来返回元素。")]),e._v(" "),t("p",[e._v("在使用 LinkedHashSet 时，需要注意额外的空间开销，因为 LinkedHashSet 需要维护一个链表来存储元素的插入顺序。")]),e._v(" "),t("p",[e._v("另外，LinkedHashSet 的遍历操作可能会比HashSet慢一些，因为LinkedHashSet 需要按照链表的顺序来返回元素。")]),e._v(" "),t("h3",{attrs:{id:"_3-treeset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-treeset"}},[e._v("#")]),e._v(" 3. TreeSet")]),e._v(" "),t("p",[e._v("TreeSet 是另一个常用的 Set 实现类，它是基于红黑树（一种自平衡的二叉查找树）来实现的。")]),e._v(" "),t("p",[e._v("在 TreeSet 中，元素是有序的，因为红黑树是一种自平衡的二叉查找树，能够自动对元素进行排序。")]),e._v(" "),t("p",[e._v("当我们往 TreeSet 中添加一个元素时，TreeSet 会根据元素的值来将元素添加到红黑树中的合适位置。")]),e._v(" "),t("p",[e._v("在遍历 TreeSet 时，TreeSet 会按照元素的顺序来返回元素。")]),e._v(" "),t("p",[e._v("在使用 TreeSet 时，需要保证元素的类型实现了 Comparable 接口，或者在创建 TreeSet 时指定一个 Comparator 比较器。")]),e._v(" "),t("p",[e._v("因为TreeSet需要对元素进行排序，而排序需要元素具有可比性。")]),e._v(" "),t("h3",{attrs:{id:"_4-enumset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-enumset"}},[e._v("#")]),e._v(" 4. EnumSet")]),e._v(" "),t("p",[e._v("提到 EnumSet，很多同学可能都是第一次听到这个概念，不过看到这个名字，我们也大概可以猜到它的作用，肯定和枚举有关。")]),e._v(" "),t("p",[e._v("EnumSet 是一种专门用来存储枚举类型的 Set 实现类。")]),e._v(" "),t("p",[e._v("在 EnumSet 中，元素的值必须是枚举类型的值，因此它可以用来存储一组特定的枚举常量。")]),e._v(" "),t("p",[e._v("EnumSet 的内部实现是使用了位向量来实现的，因此它提供了非常高效的存储和操作。")]),e._v(" "),t("blockquote",[t("p",[e._v("❝")]),e._v(" "),t("p",[e._v("位向量概念（AI 提供）：")]),e._v(" "),t("p",[e._v("位向量（Bit Vector）是一种用于对大规模数据进行压缩存储的数据结构，它能够有效地利用计算机内存空间，同时也便于高效地进行位运算。")]),e._v(" "),t("p",[e._v("具体来说，位向量是由一组二进制位组成的数组，其中每个二进制位只能取0或1两个值。")]),e._v(" "),t("p",[e._v("我们可以利用位向量来表示一个集合，其中每个二进制位对应集合中的一个元素，当某个元素在集合中出现时，对应的二进制位设置为 1，否则设置为 0。")]),e._v(" "),t("p",[e._v("这样做的好处是，可以用非常小的内存空间来存储大规模的集合数据，同时也可以通过位运算来高效地进行集合操作，如交、并、差等。")]),e._v(" "),t("p",[e._v("例如，假设我们有一个由 10000 个整数组成的集合，我们可以使用一个长度为 10000 的位向量来表示该集合，其中第 i 个二进制位表示整数i是否在集合中出现。")]),e._v(" "),t("p",[e._v("如果整数i在集合中出现，则对应二进制位设置为 1，否则设置为 0。")]),e._v(" "),t("p",[e._v("这样，整个集合就可以用一个长度为 10000 的二进制数组来表示，而不需要使用 10000 个整数或者其他数据类型来分别表示每个元素。")]),e._v(" "),t("p",[e._v("在实际应用中，位向量常常用于大规模数据的压缩存储和高效计算，如搜索引擎中的倒排索引、网络流量分析、数据挖掘等领域。")]),e._v(" "),t("p",[e._v("由于位向量具有空间效率高、计算效率高等优点，因此在处理大规模数据时，它是一种非常重要的数据结构。")]),e._v(" "),t("p",[e._v("❞")])]),e._v(" "),t("hr"),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("总结：")])]),e._v(" "),t("p",[t("strong",[e._v("Set 接口提供了一种存储不重复元素的集合容器，它有多种实现方式。")])]),e._v(" "),t("p",[t("strong",[e._v("在使用 Set 接口时，需要根据具体的场景来选择合适的实现类，以便达到更好的性能和效果。")])]),e._v(" "),t("p",[t("strong",[e._v("在使用 Set 接口时，需要注意以下几点：")])]),e._v(" "),t("p",[t("strong",[e._v("1. Set 接口不能存储重复的元素，因此需要保证元素的唯一性；")])]),e._v(" "),t("p",[t("strong",[e._v("2. HashSet 是无序的，而 LinkedHashSet 是有序的；")])]),e._v(" "),t("p",[t("strong",[e._v("3. 在使用 HashSet 时，需要保证元素的 hashCode() 方法和 equals() 方法的正确性；")])]),e._v(" "),t("p",[t("strong",[e._v("4. 在使用 LinkedHashSet 时，需要额外的空间来维护插入顺序。")])]),e._v(" "),t("p",[t("strong",[e._v("5. 在使用 EnumSet 时，需要保证元素都是枚举类型的值。")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);