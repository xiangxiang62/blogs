(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{471:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("大家好，我是香香；")]),a._v(" "),t("p",[a._v("今天我们来聊一聊"),t("code",[a._v("多线程")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[a._v("#")]),a._v(" 多线程")]),a._v(" "),t("p",[a._v("有的小伙伴可能会觉得多线程是比较难以理解的一个点，那我们就先从最基础的开始讲起，更大！更细！更全！然而不可避免的就是篇幅会有点长，甚至开专栏讲解。")]),a._v(" "),t("blockquote",[t("p",[a._v("要了解 "),t("code",[a._v("多线程")]),a._v(" 之前我们要先知道什么是 "),t("strong",[a._v("线程")]),a._v("，什么是 "),t("strong",[a._v("进程")]),a._v("。")])]),a._v(" "),t("h4",{attrs:{id:"_1-那什么是线程和进程呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-那什么是线程和进程呢"}},[a._v("#")]),a._v(" 1. 那什么是线程和进程呢？")]),a._v(" "),t("p",[a._v("线程和进程是操作系统中的两个核心概念，用于实现程序的并发执行和资源管理。")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("进程（Process）")]),a._v("：\n进程是指计算机中正在运行的一个程序实例。每个进程都有自己独立的内存空间、数据栈和执行环境，可以包含多个线程。一个进程通过分配给它的计算机资源（如CPU、内存等）来执行任务。每个进程之间是相互独立的，它们不能直接访问彼此的内存空间。")])]),a._v(" "),t("p",[t("strong",[a._v("进程的特点：")])]),a._v(" "),t("ul",[t("li",[a._v("拥有独立的内存空间和执行环境")]),a._v(" "),t("li",[a._v("可以包含多个线程")]),a._v(" "),t("li",[a._v("进程之间相互独立，无法直接访问彼此的内存空间")]),a._v(" "),t("li",[a._v("进程的创建和销毁需要操作系统进行调度和资源管理")])]),a._v(" "),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("code",[a._v("线程（Thread）")]),a._v("：\n线程是进程中的一个执行单元，是进程的实际执行者。一个进程可以包含多个线程，这些线程共享同一个进程的资源，如内存空间、文件句柄等。线程是 CPU 调度的基本单位，不同线程之间的切换开销较小。")])]),a._v(" "),t("p",[t("strong",[a._v("线程的特点：")])]),a._v(" "),t("ul",[t("li",[a._v("是进程中的执行单元")]),a._v(" "),t("li",[a._v("多个线程可以共享进程的资源")]),a._v(" "),t("li",[a._v("线程之间切换开销较小")]),a._v(" "),t("li",[a._v("线程的创建和销毁比进程更轻量级")])]),a._v(" "),t("p",[t("strong",[a._v("区别：")])]),a._v(" "),t("ul",[t("li",[a._v("资源管理：进程拥有独立的资源空间，而线程是共享进程的资源。不同进程之间无法直接访问彼此的内存空间，但线程可以访问同一进程中的共享内存。")]),a._v(" "),t("li",[a._v("创建和销毁开销：由于进程拥有独立的资源空间，所以创建和销毁进程的开销相对较大。而线程的创建和销毁则比进程更轻量级，开销较小。")]),a._v(" "),t("li",[a._v("执行能力：在多核处理器上，多个线程可以并行执行，从而提高程序的性能。而多个进程之间需要进行进程切换，开销较大，无法充分利用多核资源。")]),a._v(" "),t("li",[a._v("通信和同步：进程之间通信需要使用进程间通信机制（如管道、共享内存等），而线程之间可以通过共享内存进行通信。线程共享进程的资源，因此需要进行同步操作来避免竞争条件和数据不一致。")])]),a._v(" "),t("p",[t("strong",[a._v("总结：")])]),a._v(" "),t("p",[a._v("进程是系统中资源分配的基本单位，而线程是进程中执行任务的基本单位。进程之间独立，线程之间共享进程的资源。线程的创建和销毁开销小，执行能力强，但需要进行同步操作来确保数据的一致性。了解线程和进程的概念和区别，有助于合理利用资源，实现程序的并发执行和高效运行。")]),a._v(" "),t("blockquote",[t("p",[a._v("上面我们借助大篇幅了解了一下进程和线程是什么，以及它们的区别。知道了两者的概念之后，让我们重新聊回多线程。")])]),a._v(" "),t("h3",{attrs:{id:"_2-多线程是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-多线程是什么"}},[a._v("#")]),a._v(" 2. 多线程是什么？")]),a._v(" "),t("p",[a._v("多线程是指在一个程序中同时执行多个线程的能力。线程是执行程序的最小单位，每个线程都有自己的执行路径和执行状态。在多线程编程中，可以将任务分为多个子任务，并在不同的线程中并发执行，从而提高程序的效率和性能。")]),a._v(" "),t("p",[a._v("多线程编程的"),t("code",[a._v("核心概念")]),a._v("包括"),t("a",{attrs:{href:""}},[a._v("线程创建")]),a._v("、"),t("a",{attrs:{href:""}},[a._v("线程同步")]),a._v("和"),t("a",{attrs:{href:""}},[a._v("线程通信")]),a._v("。")]),a._v(" "),t("ul",[t("li",[a._v("线程创建是指创建和启动线程；")]),a._v(" "),t("li",[a._v("线程同步是指协调多个线程之间的执行顺序和访问共享资源的方式；")]),a._v(" "),t("li",[a._v("线程通信是指多个线程之间的信息交换和协作。")])]),a._v(" "),t("p",[a._v("多线程是"),t("code",[a._v("并发编程")]),a._v("中的一个机制，它允许一个程序同时执行多个任务，从而"),t("code",[a._v("大大提升效率")]),a._v("。")]),a._v(" "),t("h5",{attrs:{id:"怎么提升效率呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么提升效率呢"}},[a._v("#")]),a._v(" 怎么提升效率呢？")]),a._v(" "),t("p",[a._v("举个例子，比如说现在工厂流水线上只有一名工人小香，然后输送带每 30 秒输送一件货物；此时小香的工作效率为 1件/30s。这个时候老板过来了，老板说这不行啊，你这样搞我还怎么赚钱，我还怎么换新车？！于是老板痛下决心！新购 6 台输送台，然后第 0 秒的时候第一台启动，第 5 秒时第二台启动......这下原本小香 30s 只需要搬运一件货物，现在可以搬运 6 件；老板欣慰的笑了！")]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"多线程创建流程概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多线程创建流程概念"}},[a._v("#")]),a._v(" 多线程创建流程概念：")]),a._v(" "),t("p",[t("code",[a._v("创建线程")]),a._v("：\n在 Java 中，可以通过继承 "),t("code",[a._v("Thread")]),a._v(" 类或实现 "),t("code",[a._v("Runnable")]),a._v(" 接口来创建新的线程。 继承 Thread 类需要重写 run() 方法，在 run() 方法中定义线程要执行的任务。 实现 Runnable 接口同样需要实现 run() 方法，并将实现了该接口的对象传递给 Thread 类的构造函数。")]),a._v(" "),t("p",[t("code",[a._v("启动线程")]),a._v("：\n创建线程对象后，可以通过调用 start() 方法启动线程，start() 方法会在新线程中调用 run() 方法执行任务。")]),a._v(" "),t("p",[t("code",[a._v("线程生命周期")]),a._v("：\n线程在 Java 中具有多种状态，例如新建状态、就绪状态、运行状态、阻塞状态和死亡状态等。 线程会根据不同的情况在这些状态之间转换，比如因为调用 sleep() 方法而进入阻塞状态，或者因为执行完 run() 方法而进入死亡状态等。")]),a._v(" "),t("p",[t("code",[a._v("线程同步与通信")]),a._v("：\n多个线程访问共享资源时可能导致数据不一致性和竞争条件问题，Java提供了 synchronized 关键字和锁机制来实现线程同步。")]),a._v(" "),t("p",[a._v("此外，Java 还提供了 wait()、notify() 和 notifyAll() 等方法来实现线程间的通信和协调。")]),a._v(" "),t("p",[a._v("ps: 这些方法的具体讲解会在后续的专栏中提及。")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("线程池：")]),a._v(" 为了更好地管理线程，Java 提供了 ThreadPoolExecutor 等线程池类，可以方便地管理和复用线程，提高线程的利用率。")])]),a._v(" "),t("h3",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),t("h3",{attrs:{id:"_3-多线程的使用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-多线程的使用方法"}},[a._v("#")]),a._v(" 3. 多线程的使用方法")]),a._v(" "),t("p",[a._v("在 Java 中，多线程的使用主要涉及两个核心类："),t("code",[a._v("Thread")]),a._v(" 和 "),t("code",[a._v("Runnable")]),a._v("。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Thread 类是 Java 提供的一个线程类，它封装了线程的属性和行为；")])]),a._v(" "),t("li",[t("p",[a._v("Runnable 接口则定义了一个线程的任务，通过实现该接口并传入 Thread 类中，可以实现线程的执行逻辑。")])])]),a._v(" "),t("p",[a._v("下面是使用继承 Thread 类和实现 Runnable 接口两种方式创建多线程的示例代码：")]),a._v(" "),t("ol",[t("li",[a._v("继承 Thread 类：")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n@Author: Coderxinang\n**/")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 定义线程的任务逻辑")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),a._v(" thread "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 启动线程")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("实现 Runnable 接口：")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n@Author: Coderxinang\n**/")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyRunnable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 定义线程的任务逻辑")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyRunnable")]),a._v(" runnable "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyRunnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" thread "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("runnable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 启动线程")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"_3-多线程的使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-多线程的使用场景"}},[a._v("#")]),a._v(" 3. 多线程的使用场景")]),a._v(" "),t("p",[a._v("多线程技术可以应用于各种场景，其中包括并发处理、资源共享和响应性能要求等。")]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("并发处理")]),a._v("：当程序需要同时处理多个任务时，可以使用多线程来提高处理效率。例如，服务器端的并发请求处理、大数据处理等场景。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("资源共享")]),a._v("：多线程可以实现对共享资源的并发访问，提高资源利用率。例如，数据库连接池的管理、文件读写操作等。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("响应性能要求")]),a._v("：在一些对响应速度有严格要求的场景下，多线程可以提高程序的响应速度，增强用户体验。例如，Web 服务器的请求响应、游戏开发中的图形渲染等。")])])]),a._v(" "),t("h3",{attrs:{id:"_4-为什么使用多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么使用多线程"}},[a._v("#")]),a._v(" 4. 为什么使用多线程？")]),a._v(" "),t("p",[a._v("使用多线程有以下几个优势：")]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("提高程序性能")]),a._v("：多线程能够充分利用多核资源，实现并行处理，从而提高程序的运行速度和并发处理能力。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("提高资源利用率")]),a._v("：多线程可以实现对共享资源的并发访问，避免资源的浪费和冲突。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("增强用户体验")]),a._v("：多线程能够提高程序的响应速度，减少用户的等待时间，提升用户体验度。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("实现异步编程")]),a._v("：多线程可以实现程序的异步执行，提高程序的灵活性和效率。")])])]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("总结：Java 多线程技术是提升程序性能的重要工具。通过合理地使用多线程，我们可以充分发挥计算机的多核优势，提高程序的运行效率和并发处理能力。无论是在服务器端的并发处理，还是在响应性能要求较高的场景中，多线程都能够给我们带来明显的好处。因此，掌握多线程技术成为了Java程序员必备的技能之一。")])])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("span",{staticStyle:{display:"block","text-align":"center",color:"orangered"}},[a._v("近期推荐")])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247484141&idx=2&sn=d51584ec2d2606b2a2668133e6c7ce59&chksm=cf051f6cf872967aec1cc70c34788d3546a26cba8b2b2a6c9cb59c89d1112b03c032dd6e249c&token=290920986&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("了解 Lambda 表达式：编程中的独一档"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247484052&idx=1&sn=ce454088b1f766a86b1d8cad5a8a032b&chksm=cf051f15f8729603706c66afe17ab4dd3b82c6a7896eccef3eb80fc94f9afe6d89403079de06&token=290920986&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 Java 中的 Map 接口及其实现类"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247483957&idx=1&sn=c9400ebac89f14fe2ff57952d9bc1d30&chksm=cf051fb4f87296a2bbf3a214dd2edae377d64c44b387427fa3859b609210a54a6a129a161282&token=290920986&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("TCP 连接的三次握手和四次挥手详解，以及如何实现可靠传输？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);