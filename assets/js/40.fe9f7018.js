(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{467:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("大家好，我是香香。说来也巧，我刚想分享 Lambda 表达式，Java 8 就被 Spring 官网 “弃用” 了。。。但是这依旧不能影响 lambda 表达式的地位。接下来我将从概念、基础语法、注意点、应用场景、好处等方面详细介绍Lambda表达式。")])]),a._v(" "),t("h2",{attrs:{id:"_1-lambda-表达式的概念与基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-lambda-表达式的概念与基本语法"}},[a._v("#")]),a._v(" 1. Lambda 表达式的概念与基本语法")]),a._v(" "),t("p",[a._v("Lambda 表达式是 Java 8 中引入的一项重要特性，它可以使代码更简洁、易读，它可以用更简洁的方式表示匿名函数，同时支持 "),t("strong",[a._v("函数式编程")]),a._v(" 和 "),t("strong",[a._v("并行计算")]),a._v(" 等场景。")]),a._v(" "),t("p",[a._v("在传统的Java编程中，我们常常需要为接口创建实现类或使用匿名内部类来实现某些功能，而Lambda表达式则可以通过简洁明了的语法来替代这些繁琐的步骤。")]),a._v(" "),t("p",[a._v("Lambda表达式的基本语法如下所示：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parameters"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" expression\n或\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parameters"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" statements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h6",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("p",[t("code",[a._v("parameters")]),a._v(" 指定了Lambda表达式的参数列表，可以包含零个、一个或多个参数。")]),a._v(" "),t("p",[t("code",[a._v("expression")]),a._v(" 或 "),t("code",[a._v("statements")]),a._v(" 则指定了Lambda表达式的具体实现，可以是一个表达式或一段代码块。")]),a._v(" "),t("p",[a._v("表达式和代码块可以根据需要选择，如果Lambda表达式只包含一个表达式，则可以直接写表达式。")]),a._v(" "),t("p",[a._v("如果需要执行更复杂的操作，则需要使用代码块，并在代码块中编写多条语句。")]),a._v(" "),t("p",[a._v("Lambda表达式的参数列表可以显式指定参数类型，也可以根据上下文进行推断。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n或\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n或\ns "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("以上三种写法是等价的：")]),a._v(" "),t("ul",[t("li",[a._v("第一种写法显式指定了参数类型；")]),a._v(" "),t("li",[a._v("第二种写法省略了参数类型；")]),a._v(" "),t("li",[a._v("第三种写法既省略了参数类型，也省略了括号。对于含糊不清的情况，如参数类型无法推断时，仍需要显式指定参数类型。")])]),a._v(" "),t("h2",{attrs:{id:"_2-lambda表达式的优势与应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-lambda表达式的优势与应用场景"}},[a._v("#")]),a._v(" 2. Lambda表达式的优势与应用场景")]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("简洁优雅：")]),a._v(" 相比传统的匿名内部类，Lambda表达式更加简洁明了，能够以更少的代码来完成相同的功能。这使得代码更容易编写和理解，减少了不必要的冗余。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("函数式编程：")]),a._v(" Lambda表达式的引入，使Java具备了函数式编程的特性。函数式编程注重代码的表达能力和函数之间的组合，可以使代码更加模块化、可复用和易于测试。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("提高效率：")]),a._v(" 通过使用Lambda表达式，可以减少编写和维护大量的样板代码，节省了开发人员的时间和精力。同时，Lambda表达式还可以与集合框架中的Stream API相结合，进一步提高代码的运行效率。")])])]),a._v(" "),t("h3",{attrs:{id:"_2-1-lambda表达式在以下场景中尤为适用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-lambda表达式在以下场景中尤为适用"}},[a._v("#")]),a._v(" 2.1 Lambda表达式在以下场景中尤为适用：")]),a._v(" "),t("h3",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("操作")]),a._v("：Lambda表达式能够简化集合操作，如对列表进行筛选、映射、排序等。通过使用Lambda表达式，我们可以以更简洁的方式完成这些操作，提高了代码的可读性和维护性。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("多线程编程")]),a._v("：在多线程编程中，Lambda表达式可以作为参数传递给线程或线程池，简化了线程的创建和管理。通过Lambda表达式，我们可以更方便地实现并行计算，提高程序的性能。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("GUI事件处理")]),a._v("：对于GUI编程，Lambda表达式可以极大地简化事件处理的代码。通过将事件处理逻辑写成Lambda表达式，我们可以减少编写大量的匿名内部类，使代码更加清晰和易读。")])])]),a._v(" "),t("h3",{attrs:{id:"_2-2-注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-注意点"}},[a._v("#")]),a._v(" 2.2 注意点")]),a._v(" "),t("h3",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),t("h4",{attrs:{id:"_1-类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型推断"}},[a._v("#")]),a._v(" 1. 类型推断")]),a._v(" "),t("p",[a._v("虽然Lambda表达式的参数类型可以根据上下文进行推断，但对于含糊不清的情况，仍需要显式指定参数类型。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\n")])])]),t("p",[a._v("在这个Lambda表达式中，编译器无法推断x和y的类型，因此需要显式指定参数类型：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\n")])])]),t("h4",{attrs:{id:"_2-变量访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量访问"}},[a._v("#")]),a._v(" 2. 变量访问")]),a._v(" "),t("p",[a._v("Lambda表达式可以访问外部的局部变量，但这些变量必须是最终(final)或事实上的最终(effectively final)。最终变量是指一旦初始化就不可再改变的变量，而事实上的最终变量是指虽然变量没有被声明为final，但在使用之前只被赋值了一次，因此与final变量的行为类似。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),a._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("在这个Lambda表达式中，变量x必须是最终或事实上的最终变量，否则编译器会报错。")]),a._v(" "),t("h4",{attrs:{id:"_3-方法引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法引用"}},[a._v("#")]),a._v(" 3. 方法引用")]),a._v(" "),t("p",[a._v("Lambda表达式还可以与方法引用结合使用，进一步简化代码。方法引用可以直接引用现有方法，而不需要重新编写Lambda表达式。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("这个代码片段中，使用了方法引用String::length来获取字符串的长度，简化了Lambda表达式的编写。")]),a._v(" "),t("h2",{attrs:{id:"_3-lambda表达式的实例演示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-lambda表达式的实例演示"}},[a._v("#")]),a._v(" 3. Lambda表达式的实例演示")]),a._v(" "),t("p",[a._v("为了更好地理解和应用Lambda表达式，让我们通过实例来演示其妙用。")]),a._v(" "),t("h4",{attrs:{id:"_1-集合操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-集合操作"}},[a._v("#")]),a._v(" 1. 集合操作")]),a._v(" "),t("p",[a._v("假设我们有一个字符串列表，需要筛选出长度大于5的字符串并打印出来。传统的方式可能需要使用循环和条件判断，而通过Lambda表达式，我们可以以更简洁的方式实现：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"apple"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"banana"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"orange"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"watermelon"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("str "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("除此之外，Lambda 表达式也可以与 Java 8 中引入的 Stream 流相结合，实现对集合的筛选、映射、排序等功能。")]),a._v(" "),t("p",[a._v("这也将使得代码更加简洁和可读。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"apple"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"banana"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"pear"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("startsWith")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v('这个代码片段中，使用Lambda表达式和Stream API筛选以"a"开头的字符串，并输出结果。')]),a._v(" "),t("h4",{attrs:{id:"_2-多线程编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-多线程编程"}},[a._v("#")]),a._v(" 2. 多线程编程")]),a._v(" "),t("p",[a._v("在多线程编程中，我们经常需要创建新的线程或使用线程池来执行任务。下面是使用Lambda表达式创建线程的示例：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 线程执行的代码逻辑")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** \n使用了 Java 中的 Thread 类来创建和启动线程。\n通过调用 Thread 的 Start() 方法，线程将在后台异步执行其中的代码逻辑。\n-- CoderXiang\n**/")]),a._v("\n")])])]),t("p",[a._v("其次 Lambda 表达式可以也作为参数传递给线程或线程池，简化了线程的创建和管理。它提供了一种便捷的方式来实现并行计算。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExecutorService")]),a._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Executors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("newFixedThreadPool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nexecutor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("submit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 执行任务")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** \n使用了Java中的ExecutorService接口和Executors类来创建一个线程池，\n并通过submit()方法向线程池提交一个任务。\n线程池会负责管理线程的生命周期，并根据需要自动创建、重用和销毁线程。\n-- CoderXiang\n**/")]),a._v("\n")])])]),t("p",[a._v("这个代码片段中，使用Lambda表达式作为Runnable接口的实现，提交任务到线程池中执行。")]),a._v(" "),t("h4",{attrs:{id:"_3-函数式接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数式接口"}},[a._v("#")]),a._v(" 3. 函数式接口")]),a._v(" "),t("p",[a._v("Lambda表达式在Java中引入了函数式编程的概念。函数式接口是只包含一个抽象方法的接口，Lambda表达式可以作为该接口的实现。这为函数式编程提供了便利。例如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@FunctionalInterface")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyFunction")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MyFunction")]),a._v(" f "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("在这个例子中，定义了一个函数式接口MyFunction，Lambda表达式实现了该接口的抽象方法，然后调用Lambda表达式进行计算。")]),a._v(" "),t("h4",{attrs:{id:"_4-gui事件处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-gui事件处理"}},[a._v("#")]),a._v(" 4. GUI事件处理")]),a._v(" "),t("p",[a._v("在JavaFX中，我们可以利用Lambda表达式来简化事件处理的代码。例如，以下代码片段展示了如何使用Lambda表达式处理按钮的点击事件：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Button")]),a._v(" button "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Button")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Click Me"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nbutton"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setOnAction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("event "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按钮点击事件的代码逻辑")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("通过以上实例，我们可以看到Lambda表达式在各种场景下的简洁和易读性，为我们的编程带来了很大的便利。")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("总结：Lambda表达式作为Java编程语言的一项重要特性，不仅提高了代码的简洁性和可读性，还为我们带来了函数式编程的优势。通过灵活运用Lambda表达式，我们可以更高效地开发出高质量的应用程序。希望本篇推文能够帮助大家更好地理解和应用Lambda表达式，提升编程技能。谢谢大家的阅读！")])])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("span",{staticStyle:{display:"block","text-align":"center",color:"orangered"}},[a._v("近期推荐")])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247484031&idx=2&sn=a7a84a011ccfa58a3eabc85eda32c551&chksm=cf051ffef87296e86805560520d8d807da2a840dac26452e26dc13e735eb9f94f6c77c57d5d7#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java中Set集合的常用实现类及其特点"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247483957&idx=1&sn=c9400ebac89f14fe2ff57952d9bc1d30&chksm=cf051fb4f87296a2bbf3a214dd2edae377d64c44b387427fa3859b609210a54a6a129a161282&token=290920986&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("TCP 连接的三次握手和四次挥手详解，以及如何实现可靠传输？"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTQ0NzI3OA==&mid=2247483902&idx=1&sn=e3eb84eec58ae9a3f4687ca5a00bac96&chksm=cf051c7ff872956946dea20b49b0bd9a839bbefb03fcfc12a03cc95b648c6b5fa3a4c12e8ae5&token=290920986&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("关于 Static 静态关键字的使用，你了解多少？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);