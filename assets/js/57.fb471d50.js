(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{482:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("大家好，我是香香。")]),t._v(" "),s("p",[t._v("相信大家现在在开发的时候，用到的最多的就是 Spring 全家桶，那说到这里我们就不得不去认识一下 Spring 框架的两个核心特性： "),s("code",[t._v("AOP")]),t._v(" 和"),s("code",[t._v("IOC")]),t._v("。")]),t._v(" "),s("p",[t._v("那我们今天就先来讲一下 "),s("code",[t._v("IOC")]),t._v(" (控制反转)。")]),t._v(" "),s("h2",{attrs:{id:"ioc-控制反转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc-控制反转"}},[t._v("#")]),t._v(" IOC（控制反转）")]),t._v(" "),s("p",[t._v("在现代软件开发中，松耦合和依赖注入是两个重要的概念。")]),t._v(" "),s("p",[t._v("它们可以提高代码的可维护性、可扩展性和可测试性，使我们的应用程序更加灵活和易于管理。")]),t._v(" "),s("p",[t._v("而 Spring 框架中的 IOC 容器就是帮助我们实现这些目标的利器。")]),t._v(" "),s("h3",{attrs:{id:"_1-理解-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解-ioc"}},[t._v("#")]),t._v(" 1. 理解 IOC")]),t._v(" "),s("p",[t._v("IOC 是 Spring 框架的核心概念之一。")]),t._v(" "),s("p",[t._v("传统的编程模式中，对象的创建和管理都由开发人员手动完成，导致高度耦合的代码，难以进行单元测试和模块化开发。")]),t._v(" "),s("p",[t._v("而 IOC 通过将对象的创建和依赖关系的管理交给容器来完成，实现了对对象的控制反转。")]),t._v(" "),s("h3",{attrs:{id:"_2-ioc容器的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-ioc容器的作用"}},[t._v("#")]),t._v(" 2. IOC容器的作用")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("对象的生命周期管理")]),t._v("：IOC 容器负责创建对象、初始化依赖关系和销毁对象。我们只需要声明对象以及它们之间的依赖关系，剩下的工作都由容器来完成。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("松耦合的组件协作")]),t._v("：在IOC 容器中，对象之间的依赖关系通过配置文件或注解来描述，而不是硬编码在代码中。这样，当需求变化时，我们只需要修改配置而不是修改代码，实现了组件之间的松耦合。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("依赖注入")]),t._v("：IOC 容器通过依赖注入将对象的依赖关系自动注入到目标对象中。这样，我们可以专注于业务逻辑的编写，而无需手动管理各个对象之间的依赖关系。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-ioc-容器的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-ioc-容器的实现"}},[t._v("#")]),t._v(" 3. IOC 容器的实现")]),t._v(" "),s("p",[t._v("Spring 框架提供了多种 IOC 容器的实现，其中最常用的是基于 XML 配置的 ApplicationContext 容器和基于注解的 AnnotationConfigApplicationContext 容器。")]),t._v(" "),s("ol",[s("li",[t._v("XML 配置的 ApplicationContext 容器：通过在XML配置文件中声明 Bean 和依赖关系，Spring 容器会根据配置文件来创建对象并管理它们的生命周期和依赖关系。例如：")])]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("userService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.example.UserService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ref")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.example.UserRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("基于注解的 AnnotationConfigApplicationContext 容器：通过在 Java 类上添加注解来声明Bean和依赖关系，Spring 容器会根据注解配置来创建对象并管理它们的生命周期和依赖关系。例如：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("userService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("userRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("userRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-依赖注入的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-依赖注入的方式"}},[t._v("#")]),t._v(" 4. 依赖注入的方式")]),t._v(" "),s("p",[t._v("Spring 框架支持多种依赖注入的方式，包括构造函数注入、Setter 方法注入和字段注入。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("构造函数注入")]),t._v("：通过在目标对象的构造函数中声明依赖关系，Spring 容器会在创建对象时自动解析并注入依赖。例如：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userRepository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("Setter 方法注入")]),t._v("：通过在目标对象的 Setter 方法上添加注解或配置文件来声明依赖关系，Spring 容器会在创建对象后调用 Setter 方法来注入依赖。例如：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUserRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userRepository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("code",[t._v("字段注入")]),t._v("：通过在目标对象的字段上添加注解或配置文件来声明依赖关系，Spring 容器会在创建对象后直接注入依赖。例如：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("hr"),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("总结:\nSpring 框架的 IOC 容器是实现松耦合和依赖注入的重要工具。通过 IOC 容器，我们可以实现对象的生命周期管理、组件之间的松耦合以及依赖关系的自动注入。它使我们的代码更加灵活、可维护和可测试，并提高了开发效率。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);